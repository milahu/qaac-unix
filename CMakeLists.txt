# TODO generate mp4v2/libplatform/config.h
# usually this is generated by configure

cmake_minimum_required(VERSION 3.27 FATAL_ERROR)

project(qaac LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(common_extra_flags "-O1 -ggdb -Wfatal-errors -Werror -Wno-multichar -DQAAC=1 -DNO_COREAUDIO=1")

set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   ${common_extra_flags}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${common_extra_flags}")

include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

find_package(PkgConfig REQUIRED)

#pkg_check_modules(MP4V2 mp4v2)

#find_package(MP4V2 REQUIRED)
#message(STATUS "Found mp4v2 ${MP4V2_PACKAGE_VERSION}")

# TAGLIB_C TAGLIB FLAC FLAC_CXX SOXR SOXR_LSR AUDIOFILE SNDFILE
# for x in TAGLIB_C TAGLIB FLAC FLAC_CXX SOXR SOXR_LSR AUDIOFILE SNDFILE; do echo $x; done

pkg_check_modules(TAGLIB_C taglib_c)
pkg_check_modules(TAGLIB taglib)
pkg_check_modules(FLAC flac)
pkg_check_modules(FLAC_CXX flac++)
pkg_check_modules(SOXR soxr)
pkg_check_modules(SOXR_LSR soxr-lsr)
pkg_check_modules(AUDIOFILE audiofile)
pkg_check_modules(SNDFILE sndfile)
pkg_check_modules(UCHARDET uchardet)

# why not? upstream mp4v2 has no MP4StdIOCallbacks
# TODO really?
# https://mp4v2.org/api/example_2callbacks_2callbacks_8c-example.html
# MP4IOCallbacks callbacks = { 0 };
# callbacks.seek = my_seek;
# callbacks.read = my_read;
# callbacks.size = my_size;
# https://mp4v2.org/api/struct_m_p4_i_o_callbacks__s.html
#[[
option(WITH_MP4V2 "prefix of mp4v2")
if(NOT WITH_MP4V2)
    message(FATAL_ERROR "please set WITH_MP4V2")
endif()
set(MP4V2_INCLUDE_DIR "${WITH_MP4V2}/include")
set(MP4V2_LIBS "${WITH_MP4V2}/lib//libmp4v2.so")
]]

# based on vcproject/qaac/qaac.vcxproj
add_executable(qaac
  main.cpp
  options.cpp
  util.cpp
  bitstream.cpp
  cautil.cpp
  lpc.c
  version.cpp
  strutil.cpp
  AudioConverterX.cpp
  AudioConverterXX.cpp
  ISource.cpp
  mp4v2wrapper.cpp
  win32util.cpp
  chanmap.cpp
  misc.cpp
  CompositeSource.cpp
  CoreAudioEncoder.cpp
  CoreAudioPaddedEncoder.cpp
#[[
  wicimage.cpp
  cuesheet.cpp
  metadata.cpp
  wgetopt.cpp
]]

  # only wav
  input/InputFactory.cpp
  input/WaveSource.cpp
#[[
  ALACEncoderX.cpp
  input/ALACPacketDecoder.cpp
  input/AvisynthSource.cpp
  input/CoreAudioPacketDecoder.cpp
  input/ExtAFSource.cpp
  input/FLACModule.cpp
  input/FLACPacketDecoder.cpp
  input/FLACSource.cpp
  input/LibSndfileSource.cpp
  input/MP4Source.cpp
  input/MPAHeader.cpp
  input/OpusPacketDecoder.cpp
  input/RawSource.cpp
  input/TakSource.cpp
  input/WavpackSource.cpp
]]

  # TODO only m4a
  output/sink.cpp
#[[
  output/CAFSink.cpp
  output/WaveOutSink.cpp
  output/WaveSink.cpp
]]

  filters/ChannelMapper.cpp
#[[
  filters/Compressor.cpp
  filters/CoreAudioResampler.cpp
  filters/Limiter.cpp
  filters/MatrixMixer.cpp
  filters/Normalizer.cpp
  filters/PipedReader.cpp
  filters/Quantizer.cpp
  filters/SoxConvolverModule.cpp
  filters/SoxLowpassFilter.cpp
  filters/SOXRModule.cpp
  filters/SoxrResampler.cpp
]]

  # TODO move to separate project for better caching
  # why? upstream mp4v2 has no MP4StdIOCallbacks
  mp4v2/libplatform/io/File.cpp
  mp4v2/libplatform/io/File_posix.cpp
  mp4v2/libplatform/io/FileSystem.cpp
  mp4v2/libplatform/io/FileSystem_posix.cpp
  #mp4v2/libplatform/io/FileSystem_win32.cpp
  #mp4v2/libplatform/io/File_win32.cpp
  mp4v2/libplatform/number/random_posix.cpp
  #mp4v2/libplatform/number/random_win32.cpp
  #mp4v2/libplatform/platform_win32.cpp
  mp4v2/libplatform/prog/commandline_posix.cpp
  #mp4v2/libplatform/prog/commandline_win32.cpp
  mp4v2/libplatform/prog/option.cpp
  mp4v2/libplatform/sys/error.cpp
  mp4v2/libplatform/time/time.cpp
  mp4v2/libplatform/time/time_posix.cpp
  #mp4v2/libplatform/time/time_win32.cpp
  mp4v2/src/3gp.cpp
  mp4v2/src/atom_ac3.cpp
  mp4v2/src/atom_amr.cpp
  mp4v2/src/atom_avc1.cpp
  mp4v2/src/atom_avcC.cpp
  mp4v2/src/atom_chpl.cpp
  mp4v2/src/atom_colr.cpp
  mp4v2/src/atom_d263.cpp
  mp4v2/src/atom_dac3.cpp
  mp4v2/src/atom_damr.cpp
  mp4v2/src/atom_dref.cpp
  mp4v2/src/atom_elst.cpp
  mp4v2/src/atom_enca.cpp
  mp4v2/src/atom_encv.cpp
  mp4v2/src/atom_free.cpp
  mp4v2/src/atom_ftab.cpp
  mp4v2/src/atom_ftyp.cpp
  mp4v2/src/atom_gmin.cpp
  mp4v2/src/atom_hdlr.cpp
  mp4v2/src/atom_hinf.cpp
  mp4v2/src/atom_hnti.cpp
  mp4v2/src/atom_href.cpp
  mp4v2/src/atom_mdat.cpp
  mp4v2/src/atom_mdhd.cpp
  mp4v2/src/atom_meta.cpp
  mp4v2/src/atom_mp4s.cpp
  mp4v2/src/atom_mp4v.cpp
  mp4v2/src/atom_mvhd.cpp
  mp4v2/src/atom_nmhd.cpp
  mp4v2/src/atom_ohdr.cpp
  mp4v2/src/atom_pasp.cpp
  mp4v2/src/atom_root.cpp
  mp4v2/src/atom_rtp.cpp
  mp4v2/src/atom_s263.cpp
  mp4v2/src/atom_sdp.cpp
  mp4v2/src/atom_sdtp.cpp
  mp4v2/src/atom_smi.cpp
  mp4v2/src/atom_sound.cpp
  mp4v2/src/atom_standard.cpp
  mp4v2/src/atom_stbl.cpp
  mp4v2/src/atom_stdp.cpp
  mp4v2/src/atom_stsc.cpp
  mp4v2/src/atom_stsd.cpp
  mp4v2/src/atom_stsz.cpp
  mp4v2/src/atom_stz2.cpp
  mp4v2/src/atom_text.cpp
  mp4v2/src/atom_tfhd.cpp
  mp4v2/src/atom_tkhd.cpp
  mp4v2/src/atom_treftype.cpp
  mp4v2/src/atom_trun.cpp
  mp4v2/src/atom_tx3g.cpp
  mp4v2/src/atom_udta.cpp
  mp4v2/src/atom_url.cpp
  mp4v2/src/atom_urn.cpp
  mp4v2/src/atom_uuid.cpp
  mp4v2/src/atom_video.cpp
  mp4v2/src/atom_vmhd.cpp
  mp4v2/src/bmff/typebmff.cpp
  mp4v2/src/cmeta.cpp
  mp4v2/src/descriptors.cpp
  mp4v2/src/exception.cpp
  mp4v2/src/isma.cpp
  mp4v2/src/itmf/CoverArtBox.cpp
  mp4v2/src/itmf/generic.cpp
  mp4v2/src/itmf/Tags.cpp
  mp4v2/src/itmf/type.cpp
  mp4v2/src/log.cpp
  mp4v2/src/mp4atom.cpp
  mp4v2/src/mp4container.cpp
  mp4v2/src/mp4.cpp
  mp4v2/src/mp4descriptor.cpp
  mp4v2/src/mp4file.cpp
  mp4v2/src/mp4file_io.cpp
  mp4v2/src/mp4info.cpp
  mp4v2/src/mp4property.cpp
  mp4v2/src/mp4track.cpp
  mp4v2/src/mp4util.cpp
  mp4v2/src/ocidescriptors.cpp
  mp4v2/src/odcommands.cpp
  mp4v2/src/qosqualifiers.cpp
  mp4v2/src/qtff/coding.cpp
  mp4v2/src/qtff/ColorParameterBox.cpp
  mp4v2/src/qtff/PictureAspectRatioBox.cpp
  mp4v2/src/rtphint.cpp
  mp4v2/src/text.cpp
)

target_include_directories(qaac
  PRIVATE
    .
    input
    output
    mp4v2
    mp4v2/include
    ALAC
    taglib
    taglib/riff
    taglib/toolkit
# TODO remove includes: CoreAudio/AudioFile.h ...
#    CoreAudio
    filters
    include
    include/opus
    vcproject/mp4v2/include

#    ${MP4V2_INCLUDE_DIR}

    #for x in TAGLIB_C TAGLIB FLAC FLAC_CXX SOXR SOXR_LSR AUDIOFILE SNDFILE; do echo "\${${x}_INCLUDE_DIR}"; done
    ${TAGLIB_C_INCLUDE_DIR}
    ${TAGLIB_INCLUDE_DIR}
    ${FLAC_INCLUDE_DIR}
    ${FLAC_CXX_INCLUDE_DIR}
    ${SOXR_INCLUDE_DIR}
    ${SOXR_LSR_INCLUDE_DIR}
    ${AUDIOFILE_INCLUDE_DIR}
    ${SNDFILE_INCLUDE_DIR}
    ${UCHARDET_INCLUDE_DIR}

)

# TODO remove?
target_link_libraries(qaac
  PRIVATE
    #mp4v2
    #MP4V2
    #${MP4V2_LIBS}
    #conversion
    #evolution
    #initial
    #io
    #parser

    #for x in TAGLIB_C TAGLIB FLAC FLAC_CXX SOXR SOXR_LSR AUDIOFILE SNDFILE; do echo "\${${x}_LIBS}"; done
    ${TAGLIB_C_LIBS}
    ${TAGLIB_LIBS}
    ${FLAC_LIBS}
    ${FLAC_CXX_LIBS}
    ${SOXR_LIBS}
    ${SOXR_LSR_LIBS}
    ${AUDIOFILE_LIBS}
    ${SNDFILE_LIBS}
    ${UCHARDET_LIBS}

  )
